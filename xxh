#!/usr/bin/env xonsh

import os, sys, glob, argparse, datetime, re
from shutil import which
from sys import exit
from argparse import RawTextHelpFormatter
from urllib.parse import urlparse
from random import randint

sys.path.append(os.path.dirname(os.path.realpath(__file__)))
import xonssh_xxh
from xonssh_xxh.settings import global_settings

url_xxh_github = 'https://github.com/xonssh/xxh'
url_xxh_plugins_search = 'https://github.com/search?q=xxh-plugin'
url_appimage = 'https://github.com/niess/linuxdeploy-plugin-python/releases/download/continuous/xonsh-x86_64.AppImage'
local_xxh_version = global_settings['XXH_VERSION']
local_xxh_home_path = '~/.xxh'
host_xxh_home_path = '~/.xxh'
portable_methods = ['appimage']
portable_methods_str = ', '.join(portable_methods)
xonsh_bin_name = 'xonsh'

if os.name == 'nt':
    print(f"Windows is not supported. WSL1 not recommended also. WSL2 is not tested yet.\nTry to contribution: {url_xxh_github}")
    exit(1)

def xonssh():
    try:
        terminal = os.get_terminal_size()
        terminal_cols = terminal.columns
    except:
        terminal_cols=70

    if terminal_cols < 70:
        return f"\n\nContribution: {url_xxh_github}\n\nPlugins: {url_xxh_plugins_search}"

    l,r,s,t = (['@','-','_'][randint(0,2)], ['@','-','_'][randint(0,2)], ['_',' '][randint(0,1)], ['_',''][randint(0,1)])
    return f"""

     {s}___  __________     {l}    {r}    
  {s}_____  /          \\     \\__/     
   {s}___  /    ______  \\   /   \\           contribution
 {s}____  /    / __   \\  \\ /   _/   {url_xxh_github}   
   {s}__ (    / /  /   \\  \\   /          
        \\   \\___/    /  /  /                plugins            
{' ' if not t else ''}     _{t}__\\          /__/  /   {url_xxh_plugins_search}
{' ' if not t else ''}    / {'' if not t else ' '}   \\________/     /                           
{' ' if not t else ''}   /_{t}__________________/       

""" # watch -n.2 xxh -h

argp = argparse.ArgumentParser(description=f"The xxh is for using the xonsh shell wherever you go through the ssh. {xonssh()}", formatter_class=RawTextHelpFormatter, prefix_chars='-+')
argp.add_argument('--version', '-V', action='version', version=f"xonssh-xxh/{local_xxh_version}")
argp.add_argument('-p', dest='ssh_port', help="Port to connect to on the remote host.")
argp.add_argument('-l', dest='ssh_login', help="Specifies the user to log in as on the remote machine.")
argp.add_argument('-i', dest='ssh_private_key', help="File from which the identity (private key) for public key authentication is read.")
argp.add_argument('-o', dest='ssh_options', metavar='SSH_OPTION -o ...', action='append', help="SSH options are described in ssh man page. Example: -o Port=22 -o User=snail")
argp.add_argument('destination', metavar='[user@]host[:port]', help="Destination may be specified as [user@]host[:port] or server name from ~/.ssh/config")
argp.add_argument('+i','++install', default=False, action='store_true', help="Install xxh to destination host.")
argp.add_argument('+if','++install-force', default=False, action='store_true', help="Removing the host xxh home and install xxh again.")
argp.add_argument('+lh','++local-xxh-home', default=local_xxh_home_path, help=f"Local xxh home path. Default: {local_xxh_home_path}")
argp.add_argument('+hh','++host-xxh-home', default=host_xxh_home_path, help=f"Host xxh home path. Default: {host_xxh_home_path}")
argp.add_argument('+m','++method', default='appimage', help=f"Portable method: {portable_methods_str}")
argp.add_argument('+v','++verbose', default=False, action='store_true', help="Verbose mode.")
argp.add_argument('+vv','++vverbose', default=False, action='store_true', help="Super verbose mode.")
argp.usage = """xxh [ssh arguments] [user@]host[:port] [xxh arguments]

usage: xxh [-h] [-V] [-p SSH_PORT] [-l SSH_LOGIN] [-i SSH_PRIVATE_KEY] [-o SSH_OPTION -o ...] 
           [user@]host[:port]
           [+i] [+if] [+lxh LOCAL_XXH_HOME] [+hxh HOST_XXH_HOME] [+m METHOD] [+v] [+vv]
"""
help = argp.format_help().replace('\n  +','\n\nxxh arguments:\n  +',1).replace('optional ', 'common ')\
    .replace('number and exit', 'number and exit\n\nssh arguments:').replace('positional ', 'required ')
argp.format_help = lambda: help
opt = argp.parse_args()

if opt.vverbose:
    opt.verbose = True

if not opt.destination:
    print('Destination required. Try --help')
    exit(1)

if opt.method not in portable_methods:
    print(f'Currently supported methods: {portable_methods_str}')
    exit(1)

if 'ssh://' not in opt.destination:
    opt.destination = f'ssh://{opt.destination}'

url = urlparse(opt.destination)
host = url.hostname

if not host:
    print(f"Wrong distination '{host}'")
    exit(1)

if url.port:
    opt.ssh_port = url.port

if url.username:
    opt.ssh_login = url.username

ssh_arguments = []
if not opt.verbose:
   ssh_arguments = ['-o', 'LogLevel=QUIET']
if opt.ssh_port:
    ssh_arguments += ['-o', f'Port={opt.ssh_port}']
if opt.ssh_private_key:
    ssh_arguments += ['-o', f'IdentityFile={opt.ssh_private_key}']
if opt.ssh_login:
    ssh_arguments += ['-o', f'User={opt.ssh_login}']
if opt.ssh_options:
    for ssh_option in opt.ssh_options:
        ssh_arguments += ['-o', ssh_option]

if opt.verbose:
    print(f'ssh arguments: {ssh_arguments}')

if not which('ssh'):
    print('Install OpenSSH client before using xxh: https://duckduckgo.com/?q=how+to+install+openssh+client+in+linux')
    exit(1)

opt.install = True if opt.install_force else opt.install

ssh_v = ['-v'] if opt.vverbose else []

local_xxh_home_path = os.path.expanduser(opt.local_xxh_home)
local_xxh_home_parent = os.path.dirname(os.path.expanduser(local_xxh_home_path))
package_dir_path = os.path.dirname(os.path.realpath(xonssh_xxh.__file__))

if os.path.exists(local_xxh_home_path):
    if not os.access(local_xxh_home_path, os.W_OK):
        print(f"The local xxh home path isn't writable: {local_xxh_home_path}" )
        exit(1)
elif os.path.exists(local_xxh_home_parent):
    if os.access(local_xxh_home_parent, os.W_OK):
        print(f'Create local xxh home path: {local_xxh_home_path}')
        mkdir @(ssh_v) -p @(local_xxh_home_path) @(local_xxh_home_path)/plugins
    else:
        print(f"Parent for local xxh home path isn't writable: {local_xxh_home_parent}")
        exit(1)
else:
    print(f"Paths aren't writable:\n  {local_xxh_home_parent}\n  {local_xxh_home_path}")
    exit(1)

# Fix env to avoid ssh warnings
for lc in ['LC_TIME','LC_MONETARY','LC_ADDRESS','LC_IDENTIFICATION','LC_MEASUREMENT','LC_NAME','LC_NUMERIC','LC_PAPER','LC_TELEPHONE']:
    ${...}[lc] = "POSIX"

if os.path.abspath(opt.host_xxh_home) == '/':
    print("Host xxh home path {host_xxh_home} looks like /. Please check twice!")
    exit(1)

host_info_sh = os.path.join(package_dir_path, 'host_info.sh')
host_info = $(cat @(host_info_sh) | sed @(f's|_xxh_home_|{opt.host_xxh_home}|') | ssh @(ssh_v) @(ssh_arguments) @(host) -T "bash -s" ).strip()

if host_info == '':
    print(f'Unknown answer from host when getting host info. Check your connection parameters using ordinary ssh.')
    exit(1)

host_info = dict([l.split('=') for l in host_info.split('\n')])

if opt.verbose:
    print(f'host_info: {host_info}')

if host_info['xxh_home_realpath'] == '':
    print(f'Unknown answer from host when getting realpath for directory {host_xxh_home}')
    exit(1)

if host_info['xxh_version'] == '':
    print(f'Unknown answer from host when getting version for directory {host_xxh_home}')
    exit(1)

if host_info['scp'] == '' and host_info['rsync'] == '':
    print(f"There are no rsync or scp on target host. Sad but files can't be uploaded.")
    exit(1)

host_xxh_home = host_info['xxh_home_realpath']
host_xonsh_bin = os.path.join(host_xxh_home, xonsh_bin_name)
host_xonshrc = os.path.join(host_xxh_home, 'xonshrc.xsh')
host_xonsh_plugins_rc = os.path.join(host_xxh_home, 'xxh_plugins_rc.xsh')

host_xxh_version = host_info['xxh_version']

if opt.install_force == False:
    # Check version
    ask = False
    if host_xxh_version is '0':
        ask = f'Host xxh home is not empty but something went wrong while getting host xxh version.'
    elif host_xxh_version != '-1' and host_xxh_version != local_xxh_version:
        ask = f"Local xxh version '{local_xxh_version}' is not equal host xxh version '{host_xxh_version}'."

    if ask:
        choice = input(f"{ask} What's next? \n"
                       + f"s - [default] Stop here. You'll try to connect using ordinary ssh for backup current xxh home.\n"
                       + f"u - Safe update. Host xxh home will be renamed and local xxh version will be installed.\n"
                       + f"f - Force install local xxh version on host. Host xxh installation will be lost.\n"
                       + f"i - Ignore, cross fingers and continue the connection.\n"
                       + f"S/u/f/i? ").lower()

        if choice == 's' or choice.strip() == '':
            print('Stopped')
            exit(0)
        elif choice == 'u':
            local_time = datetime.datetime.now().isoformat()[:19]
            print(f"Move {host}:{host_xxh_home} to {host}:{host_xxh_home}-{local_time}")
            echo @(f"mv {host_xxh_home} {host_xxh_home}-{local_time}") | ssh @(ssh_v) @(ssh_arguments) @(host) -T "bash -s"
            opt.install = True
        elif choice == 'f':
            opt.install = True
            opt.install_force = True
        elif choice == 'i':
            pass
        else:
            print('Unknown answer')
            exit(1)

if host_xxh_version == '-1':
    yn = input(f"{host}:{host_xxh_home} not found. Install xxh? [Y/n] ").strip().lower()
    if yn == 'y' or yn == '':
        opt.install = True
    else:
        print('Unknown answer')
        exit(1)

if opt.install:
    print("\033[0;33m", end='')
    if opt.method == 'appimage':
        local_xonsh_appimage_fullpath = os.path.join(local_xxh_home_path, xonsh_bin_name)
        if not os.path.isfile(local_xonsh_appimage_fullpath):
            print(f'First time download and save xonsh AppImage from {url_appimage}')
            if which('wget'):
                r=![wget -q --show-progress @(url_appimage) -O @(local_xonsh_appimage_fullpath)]
                if r.returncode != 0:
                    print(f'Error while download appimage using wget: {r}')
                    exit(0)
            elif which('curl'):
                r=![curl @(url_appimage) -o @(local_xonsh_appimage_fullpath)]
                if r.returncode != 0:
                    print(f'Error while download appimage using curl: {r}')
                    exit(0)
            else:
                print('Please install wget or curl and try again. Howto: https://duckduckgo.com/?q=how+to+install+wget+in+linux')
                exit(1)

            chmod +x @(local_xonsh_appimage_fullpath)
    else:
        print(f'Method "{opt.method}" is not supported now')

    if opt.install_force:
        print(f'Before upload xxh remove host directory {host}:{host_xxh_home}')
        echo @(f"rm -rf {host_xxh_home}/*") | ssh @(ssh_v) @(ssh_arguments) @(host) -T "bash -s"

    print(f"Install xxh to {host}:{host_xxh_home}" )
    if which('rsync') and host_info['rsync']:
        print('Upload using rsync')
        rsync @(ssh_v) -e @(f"ssh {'' if ssh_v == [] else '-v'} {' '.join(ssh_arguments)}") -az --info=progress2 --include ".*" --exclude='*.pyc' @(local_xxh_home_path)/ @(host):@(host_xxh_home)/
        rsync @(ssh_v) -e @(f"ssh {'' if ssh_v == [] else '-v'} {' '.join(ssh_arguments)}") -az --info=progress2 --include ".*" --exclude='*.pyc' @(package_dir_path)/ @(host):@(host_xxh_home)/
    elif which('scp') and host_info['scp']:
        print("Upload using scp. Note: install rsync on local and remote host to increase speed.")
        scp_host = f"{host}:{host_xxh_home}/"
        scp @(ssh_v) @(ssh_arguments) -r -C @([] if opt.verbose else ['-q']) @(local_xxh_home_path)/* @(scp_host)
        scp @(ssh_v) @(ssh_arguments) -r -C @([] if opt.verbose else ['-q']) @(package_dir_path)/* @(scp_host)
    else:
        print('scp or rsync not found!')

    plugins_fullpath = os.path.join(local_xxh_home_path, 'plugins')
    if os.path.exists(plugins_fullpath):
        print(f'Run plugins post install on {host}')
        scripts=''
        for script in sorted(glob.glob(os.path.join(plugins_fullpath, os.path.join('*','install.xsh')), recursive=True)):
            scripts += " && %s -i --rc %s -- %s" % (host_xonsh_bin, host_xonshrc, script.replace(local_xxh_home_path + os.sep, ''))
            print(f' * {script}')

        if scripts:
            echo @(f"cd {host_xxh_home} {scripts}" ) | ssh @(ssh_v) @(ssh_arguments) @(host) -T "bash -s"

    print('Check xonsh')
    host_settings_file = os.path.join(host_xxh_home, 'settings.py')
    check = $(ssh @(ssh_v) @(ssh_arguments) @(host) -t @(host_xonsh_bin) --no-script-cache -i --rc @(host_xonshrc) -- @(host_settings_file) )

    if opt.verbose:
        print(f'Check xonsh result:\n{check}')

    if check == '' or 'AppImages require FUSE to run' in check:
        print('Check failed. Unpack AppImage...')
        host_xonsh_bin_new = os.path.join(host_xxh_home, 'xonsh-squashfs/usr/python/bin/xonsh')
        ssh @(ssh_v) @(ssh_arguments) @(host) -t @(f"cd {host_xxh_home} && ./{xonsh_bin_name} --appimage-extract | grep -E 'usr/python/bin/xonsh$' && mv squashfs-root xonsh-squashfs && mv {host_xonsh_bin} {host_xonsh_bin}-disabled && ln -s {host_xonsh_bin_new}")
        host_xonsh_bin = host_xonsh_bin_new

    print(f'First run xonsh on {host}\033[0m')

host_plugins_rc = $(ssh @(ssh_v) @(ssh_arguments) @(host) -t @(host_xonsh_bin) --no-script-cache -i --rc @(host_xonshrc) -- @(host_xonsh_plugins_rc) )

host_plugins_rc_list = host_plugins_rc.split('xxh-plugins#')
if len(host_plugins_rc_list) > 1:
    host_plugins_rc_list = host_plugins_rc_list[1]
else:
    print(f'Something went wrong while getting plugins info. Host answer: {host_plugins_rc}')
    exit(1)

ssh @(ssh_v) @(ssh_arguments) @(host) -t @(host_xonsh_bin) --no-script-cache -i --rc @(host_xonshrc) @(host_plugins_rc_list)
